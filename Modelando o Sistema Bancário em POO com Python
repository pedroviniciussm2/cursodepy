import textwrap
from decimal import Decimal

# ====================== CLASSES ======================
class Usuario:
    def __init__(self, nome, cpf, data_nascimento, endereco):
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento
        self.endereco = endereco

    def __repr__(self):
        return f"Usuário({self.nome}, CPF: {self.cpf})"


class Conta:
    LIMITE_SAQUES = 3
    LIMITE_VALOR = Decimal("500.00")

    def __init__(self, numero, agencia, usuario):
        self.numero = numero
        self.agencia = agencia
        self.usuario = usuario
        self.saldo = Decimal("0.00")
        self.extrato = []
        self.numero_saques = 0

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.extrato.append(f"Depósito:\tR$ {valor:.2f}")
            print("\n=== Depósito realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

    def sacar(self, valor):
        if valor > self.saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
        elif valor > self.LIMITE_VALOR:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
        elif self.numero_saques >= self.LIMITE_SAQUES:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
        elif valor > 0:
            self.saldo -= valor
            self.extrato.append(f"Saque:\t\tR$ {valor:.2f}")
            self.numero_saques += 1
            print("\n=== Saque realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

    def exibir_extrato(self):
        print("\n================ EXTRATO ================")
        if not self.extrato:
            print("Não foram realizadas movimentações.")
        else:
            for item in self.extrato:
                print(item)
        print(f"\nSaldo:\t\tR$ {self.saldo:.2f}")
        print("==========================================")


# ====================== FUNÇÕES AUXILIARES ======================
def menu():
    menu_texto = """\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    => """
    return input(textwrap.dedent(menu_texto))


def filtrar_usuario(cpf, usuarios):
    return next((usuario for usuario in usuarios if usuario.cpf == cpf), None)


def criar_usuario(usuarios):
    cpf = input("Informe o CPF (somente número): ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n@@@ Já existe usuário com esse CPF! @@@")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    novo_usuario = Usuario(nome, cpf, data_nascimento, endereco)
    usuarios.append(novo_usuario)
    print("=== Usuário criado com sucesso! ===")


def criar_conta(contas, usuarios, agencia="0001"):
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf, usuarios)

    if not usuario:
        print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")
        return

    numero_conta = len(contas) + 1
    nova_conta = Conta(numero_conta, agencia, usuario)
    contas.append(nova_conta)
    print("\n=== Conta criada com sucesso! ===")


def listar_contas(contas):
    if not contas:
        print("\n@@@ Nenhuma conta cadastrada! @@@")
        return
    for conta in contas:
        linha = f"""\nAgência:\t{conta.agencia}
C/C:\t\t{conta.numero}
Titular:\t{conta.usuario.nome}
"""
        print("=" * 40)
        print(textwrap.dedent(linha))


# ====================== MAIN ======================
def main():
    usuarios = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "d":
            if not contas:
                print("\n@@@ Nenhuma conta cadastrada! Crie uma conta primeiro. @@@")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in contas if c.numero == numero), None)
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            try:
                valor = Decimal(input("Informe o valor do depósito: "))
            except:
                print("\n@@@ Valor inválido! @@@")
                continue

            conta.depositar(valor)

        elif opcao == "s":
            if not contas:
                print("\n@@@ Nenhuma conta cadastrada! Crie uma conta primeiro. @@@")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in contas if c.numero == numero), None)
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            try:
                valor = Decimal(input("Informe o valor do saque: "))
            except:
                print("\n@@@ Valor inválido! @@@")
                continue

            conta.sacar(valor)

        elif opcao == "e":
            if not contas:
                print("\n@@@ Nenhuma conta cadastrada! @@@")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in contas if c.numero == numero), None)
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            conta.exibir_extrato()

        elif opcao == "nu":
            criar_usuario(usuarios)

        elif opcao == "nc":
            criar_conta(contas, usuarios)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            print("\nSaindo do sistema...")
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")


if __name__ == "__main__":
    main()
